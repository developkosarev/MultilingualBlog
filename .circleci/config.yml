# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    #working_directory: ~/lic
    docker:
      - image: circleci/php:7.2-apache-node-browsers
        enviroment:
          APP_ENV: test
          DATABASE_URL: mysql://root:@127.0.0.1:3306/symfony002blog?serverVersion=5.7
      - image: circleci/mysql:5.7
        enviroment:
          MYSQL_DATABASE: symfony002blog
          MYSQL_USER: root
          MYSQL_PASSWORD: root
          MYSQL_ROOT_PASSWORD: root

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    steps:
      - checkout
      - run:
          name: Install PHP MySQL
          command: sudo docker-php-ext-install pdo_mysql
      - run:
          name: Wait for MySQL
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 120s
      - run:
          name: Composer
          command: sudo composer self-update
      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Composer install
          command: composer install -n --prefer-dist --ignore-platform-reqs
      - run:
          name: Create database
          command: php bin/console doctrine:database:create --env=test --no-interaction
      - run:
          name: Run migration
          command: php bin/console doctrine:migrations:migrate --env=test --no-interaction
      - run:
          name: Load fixture
          command: php bin/console doctrine:fixtures:load --env=test --no-interaction
      - run:
          name: Run tests
          command: ./vendor/bin/phpunit --testdox #./vendor/bin/phpunit --configuration app/phpunit.xml.dist --colors --verbose --testdox


      #- run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      #- run: sudo docker-php-ext-install zip

      # Download and cache dependencies
      #- restore_cache:
      #    keys:
      #      # "composer.lock" can be used if it is committed to the repo
      #      - v1-dependencies-{{ checksum "composer.json" }}
      #      # fallback to using the latest cache if no exact match is found
      #      - v1-dependencies-

      #- run: composer install -n --prefer-dist

      #- save_cache:
      #    key: v1-dependencies-{{ checksum "composer.json" }}
      #    paths:
      #      - ./vendor
      #- restore_cache:
      #    keys:
      #      - node-v1-{{ checksum "package.json" }}
      #      - node-v1-
      #- run: yarn install
      #- save_cache:
      #    key: node-v1-{{ checksum "package.json" }}
      #    paths:
      #      - node_modules

      # prepare the database
      #- run: touch storage/testing.sqlite
      #- run: php artisan migrate --env=testing --database=sqlite_testing --force

      # run tests with phpunit or codecept
      #- run: ./vendor/bin/phpunit
      #- run: ./vendor/bin/codecept build
      #- run: ./vendor/bin/codecept run